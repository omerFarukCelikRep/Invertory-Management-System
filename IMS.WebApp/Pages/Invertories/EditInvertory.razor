@page "/editinvertory/{id}"

@attribute [Authorize]

@inject IViewInvertoryByIdUseCase ViewInvertoryByIdUseCase
@inject IEditInvertoryUseCase EditInvertoryUseCase
@inject NavigationManager NavigationManager

<h3>EditInvertory</h3>

@if (_invertory != null)
{
    <EditForm Model="_invertory" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Invertory Name</label>
            <InputText id="name" @bind-Value="_invertory.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="_invertory.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_invertory.Price" class="form-control"></InputNumber>
        </div>

        <br />

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Invertory? _invertory;

    protected async override Task OnInitializedAsync()
    {
        _invertory = await ViewInvertoryByIdUseCase.ExecuteAsync(Guid.Parse(Id));
    }

    public async Task OnValidSubmit()
    {
        if (_invertory != null)
        {
            await EditInvertoryUseCase.ExecuteAsync(_invertory);

            NavigationManager.NavigateTo("/invertories");
        }
    }
}
