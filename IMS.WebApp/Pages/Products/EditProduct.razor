@page "/editproduct/{id}"

@attribute [Authorize]

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />

@if (_product != null)
{
    <EditForm Model="_product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="_product.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="_product.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control"></InputNumber>
        </div>
        <ProductInvertoriesComponent 
            ProductInvertories="_product.ProductInvertories.ToList()"
            OnInvertorySelected="OnInvertorySelected"
        ></ProductInvertoriesComponent>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Product? _product;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _product = await ViewProductByIdUseCase.ExecuteAsync(Guid.Parse(Id));
    }

    private void OnInvertorySelected(List<ProductInvertory> productInvertories)
    {
        _product.ProductInvertories = productInvertories;
    }

    private void OnValidSubmit()
    {
        if (_product != null)
        {
            EditProductUseCase.ExecuteAsync(_product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
